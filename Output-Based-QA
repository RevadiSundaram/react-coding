# Output Based Questions
# 1. 
```js
console.log("start");
    const promise1 = new Promise((resolve, reject) => {
        console.log(1);
        resolve(2);
    } )
    promise1.then((res) => {
        console.log(res);
    })
    console.log("end");
```
Output:
- start
- 1 (Because inside Promise it executes sync code)
- end
- 2

Explanation:
- JS will execute sync code first and then async code
- JS engine executes line by line.

# 2.
```js
    console.log("start");
    const promise1 = new Promise((resolve, reject) => {
        console.log(1);
        resolve(2);
        console.log(3);
    } )
    promise1.then((res) => {
        console.log(res);
    })
    console.log("end");
```
Output:
- start
- 1
- 3 (only async code will be kept in callback queue)
- end
- 2

# 3. 
```js
console.log("start");
    const promise1 = new Promise((resolve, reject) => {
        console.log(1);
        console.log(3);
    } )
    promise1.then((res) => {
        console.log("Result",res);
    })
    console.log("end");
```
Output:
- start
- 1
- 3
- end 

Explanation:
- Since there is no resolve it will not go to the .then() block 

# 4.
```js
    console.log("start");
    const func = () => new Promise((resolve, reject) => {
        console.log(1);
        resolve("success");
    } );
    console.log("Middle")
    func().then((res) => {
        console.log(res);
    })
    console.log("end");
```
Output:
- start
- Middle
- 1
- end
-  sucess

# 5.
![alt text](image.png)
![alt text](<Screenshot 2024-10-06 at 3.11.24â€¯PM.png>)

Output:
- success
- defeat
- error
- Error Caught
- Sucess: test

# 6. Write first promise and write second promise, which resolve first promise
resolve second promise and print first promise.

```js
const firstPromise = new Promise((resolve, reject) => {
        resolve("First");
    })

    const secondPromise = new Promise((resolve, reject) => {
        resolve(firstPromise);
    })

    secondPromise.then((res) => {
        return res
    }).then((res) => console.log(res));
```

# 7. Rewrite using async/await

![alt text](image-1.png)

Ans:
```js
const loadJson =  async(url) =>{
        let response = await fetch(url);
        if (response.status == 200){
            let json = await response.json();
            return json;
        }
        throw new Error(response.status)
    }
    loadJson("https.//fakeurl.com/no-such-user.json").catch((err) => console.log(err));
```

# 8. Write Promise Recursively

![alt text](image-2.png)


# LocalStorage

```js
  // Load TODOs from local storage on app startup
  useEffect(() => {
    const storedTodos = JSON.parse(localStorage.getItem('todos'));
    if (storedTodos) {
      setTodos(storedTodos);
    }
  }, []);

  // Update local storage whenever TODOs change
  useEffect(() => {
    localStorage.setItem('todos', JSON.stringify(todos));
  }, [todos]);
```
